use crate::utils::Bytes;

pub fn decrypt(packet: &Bytes) -> Bytes {
    let mut output = vec![];
    for &byte in packet {
        let value = byte.wrapping_sub(0xF) ^ 0xC3;
        output.push(value & 0xFF);
    }
    output
}

#[cfg(test)]
mod test {
    use crate::server::login::decrypt::decrypt;

    #[test]
    fn test_decrypt() {
        assert_eq!(decrypt(&b"\x9C\xBB\x9F\x02\x05\x03\x05\xF2\x05\x03\x01\x03\xFF\x09\xF2\xB1\xB6\xBD\xB9\xBC\xF2\x8F\x03\x91\x96\x06\x06\x8F\x90\x91\x96\x03\x04\x00\x91\x05\x96\x91\x02\x91\x06\x05\x00\x94\x09\x95\x0A\x05\x06\x94\x96\x8F\x01\x95\x02\x95\x03\x91\x05\x00\x91\xFF\x0A\x02\x01\x05\x94\x00\xFF\x94\xFF\x95\x91\x90\x01\x96\x0A\x02\x90\x09\xFF\x01\x96\x96\x06\x03\x00\x04\xFF\x06\x96\x94\x91\x8F\x03\x01\x8F\x96\xFF\x06\x95\x90\x8F\xFF\x05\x96\x01\x04\x91\x90\x03\x94\x90\x0A\x91\x09\x02\x8F\x0A\x01\x94\x09\x03\x05\x01\x01\xFF\x96\x04\x8F\x03\x05\xFF\x0A\x96\x8F\x04\x09\x96\x96\x0A\x96\x95\x09\x02\x03\x03\x95\x8F\xF2\x04\xAF\xFF\x0A\xB4\xB6\x06\x05\xFD\xB5\xB4\x09\x01\xFD\x06\x02\x05\x06\xFD\x0A\x00\xB0\x0A\xFD\x09\xAF\x09\x04\xB0\x06\xB0\x02\xB0\x00\x02\x09\xF2\x02\x02\x03\x00\x03\xFF\x03\x01\xF2\x02\xD7\x02\xFC\x09\xFC\xFF\xFC\xFF\x01\xFF\x06\xF2\x02\xF2\x09\x0A\x00\x05\x95\x05\x94\x8F\x02\x05\x01\x94\x09\x91\x01\x03\x91\x95\x94\x95\x02\x06\x03\x91\x06\x0A\x94\x06\x8F\x04\x94\x09\xD8".to_vec()),
                   b"NoS0575 571739 admin C7AD44CBAD762A5DA0A452F9E854FDC1E0E7A52A38015F23F3EAB1D80B931DD472634DFAC71CD34EBC35D16AB7FB8A90C81F975113D6C7538DC69DD8DE9077EC 6c38fd45-ef91-4054-82b8-9c96b4b0b209 00727371 0\x0B0.9.3.3134 0 9825E5FC051F9A17AEFE047A48F4C6F9\n".to_vec());
    }
}